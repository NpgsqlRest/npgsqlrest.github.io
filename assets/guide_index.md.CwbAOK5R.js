import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.S-Qvb3wi.js";const u=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),t={name:"guide/index.md"};function l(r,s,o,p,d,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>NpgsqlRest is a <strong>production-ready</strong>, standalone <strong>web server</strong> that automatically transforms your PostgreSQL database into a REST API. It provides:</p><ul><li><strong>Automatic HTTP REST endpoints</strong> generated from your database metadata</li><li><strong>Code generation</strong> for JavaScript/TypeScript client libraries</li><li><strong>Code generation</strong> for <a href="https://www.google.com/search?q=http+files&amp;oq=http+files&amp;gs_lcrp=EgRlZGdlKgYIABBFGDkyBggAEEUYOTIGCAEQRRg8MgYIAhBFGDzSAQgxNTI4ajBqMagCALACAA&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noreferrer">HTTP files</a> for a simple way to quickly invoke and TEST your API.</li><li><strong>Declarative configuration</strong> using PostgreSQL comments</li></ul><p>To get started, you need:</p><ul><li>A <strong>PostgreSQL database</strong> for metadata and endpoint specifications</li><li><strong>Configuration</strong> via JSON files, environment variables, or command line arguments</li></ul><h2 id="declarative-approach" tabindex="-1">Declarative Approach <a class="header-anchor" href="#declarative-approach" aria-label="Permalink to &quot;Declarative Approach&quot;">​</a></h2><p>NpgsqlRest uses PostgreSQL&#39;s built-in comment system to configure API endpoints directly in your database. This declarative approach keeps your API configuration close to your data structure.</p><p>PostgreSQL allows you to attach descriptions to database objects using the <code>COMMENT</code> command:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on table users is </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Stores application user accounts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on function get_user_data(id int) is </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Gets application user account data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>To expose these as HTTP endpoints, simply add the <code>HTTP</code> keyword:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on table users is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on function get_user_data(id int) is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This configuration automatically generates:</p><ul><li><strong>REST endpoints</strong> for CRUD operations on the <code>users</code> table</li><li><strong>HTTP test files</strong> for quickly testing your API</li><li><strong>JavaScript/TypeScript client libraries</strong> with type definitions ready for your frontend</li></ul><p>The parser recognizes keywords at the start of lines, ignoring unrecognized text. This means you can combine human-readable documentation with API configuration:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on table users is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Stores application user accounts</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HTTP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on function get_user_data(id int) is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Gets application user account data</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HTTP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>For more control, you can specify detailed endpoint behavior:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">comment on function get_user_data(id int) is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Gets application user account data</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HTTP GET /admin/get-user-data</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AUTHORIZE admin</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Cache-Control: public, max-age=31536000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This creates a GET endpoint at <code>/admin/get-user-data</code> that:</p><ul><li>Requires admin authorization</li><li>Sets cache control headers for performance</li><li>Remains fully readable and maintainable</li></ul><h2 id="technology-distribution" tabindex="-1">Technology &amp; Distribution <a class="header-anchor" href="#technology-distribution" aria-label="Permalink to &quot;Technology &amp; Distribution&quot;">​</a></h2><p>NpgsqlRest is built on the latest .NET with the Kestrel web server, compiled using AOT (Ahead-of-Time) compilation for:</p><ul><li><strong>Zero dependencies</strong> - single executable file</li><li><strong>Fast startup</strong> - native performance</li><li><strong>Cross-platform</strong> - runs on Windows, macOS, and Linux</li></ul><p>Built on .NET/Kestrel, NpgsqlRest includes all modern web server capabilities out of the box, ensuring enterprise-grade performance and reliability.</p><p>NpgsqlRest is <strong>free and open-source</strong>, allowing you to:</p><ul><li>Customize builds for specific platforms</li><li>Modify functionality to meet your needs</li><li>Contribute to the project&#39;s development</li></ul>`,25)]))}const g=a(t,[["render",l]]);export{u as __pageData,g as default};
